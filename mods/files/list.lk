class List {
    'items': {}
}

fn List:add(item) {
    self.items[#self.items] = item
}

fn List:remove(item) {
    for i in self.items {
        if self.items[i] == item {
            self.items[i] = nil
        }
    }
}

fn List:contains(item) {
    for i in self.items {
        if self.items[i] == item {
            rt true
        }
    }
    rt false
}

fn List:insert(idx, item) {
    typ := type(idx)
    if typ != 'num' {
        error('arg#1: expected num, got ' + typ)
    }
    length := #self.items
    if idx >= length {
        if idx > length {
            error(fmt("Index %d out of bounds: [0,%d]", idx, length))
        } else {
            self:add(item)
        }
    } else {
        for i = idx, length - 1 {
            self.items[i + 1] = self.items[i]
        }
        self.items[idx] = item
    }
}

fn List:remove_at(idx) {
    if type(idx) != 'num' {
        error(fmt("Index %s is not a number", idx))
    }

    for i = idx, #self.items {
        self.items[i] = self.items[i + 1]
    }
}

fn List:clear() {
    self.items = {}
}

fn List:__str() {
    rt str(self.items)
}

fn List:__len() {
    rt #self.items
}

fn List:__index(idx) {
    if idx >= #self.items {
        error(fmt("Index %d out of bounds: [0,%d]", idx, #self.items))
    }
    rt self.items[idx]
}

fn List:__newindex(idx, value) {
    if type(idx) != 'num' {
        error(fmt("Index %s is not a number", idx))
    }
    if idx >= #self.items {
        error(fmt("Index %d out of bounds: [0,%d]", idx, #self.items))
    }
    self.items[idx] = value
}

rt List
