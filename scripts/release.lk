// 读取参数
args := os.args
if #args < 3 {
    print("Usage: lk release.lk <version> ['-compile|-git']")
    os.exit(1) 
}
    
version := args[2]
// 验证版本号
if not re.have(`^\d+\.\d+\.\d+$`, version) {
    print("Invalid version: %s", version)
    os.exit(1)
}

options := args[3] == nil ? '' : args[3]

// 是否带有[-compile, -tag]选项
compile := options:contains('-compile')
git := options:contains('-git')

// 开始替换新版本号
mods_index_path := "mods/index.json"
consts_ver_path := 'consts/lang.go'
mods_re_exp := `"vm": "(.*)"`
consts_re_exp := `VERSION *= *"(.*)"`
readme_re_exp := `https:\/\/badgen\.net\/badge\/LK\/([0-9]+\.[0-9]+\.[0-9]+)\/cyan`

replace_lang_ver := fn(path, re_exp) {
    content, err := os.read(path)
    if err != nil {
        print("Error reading "+path)
        os.exit(1)
    }

    old_ver := re.find(re_exp, content)
    if old_ver == nil {
        print("Error finding version in "+path)
        os.exit(1)
    }

    old_ver = old_ver[1]

    if old_ver != version {
        content = content:replace(old_ver, version)
        err := os.write(path, content)
        if err != nil {
            print("Error writing "+path)
            os.exit(1)
        }
    }
}

replace_lang_ver(mods_index_path, mods_re_exp)
replace_lang_ver(consts_ver_path, consts_re_exp)
replace_lang_ver('README.md', readme_re_exp)
replace_lang_ver('README_en.md', readme_re_exp)
print("Versions replaced.")

// Git tag
if git {
    _, err := os.exec("git tag -a v" + version + " -m 'v" + version + "'")
    if err != nil {
        print("Error tagging: " + err)
        os.exit(1)
    }
    print(fmt("Tagged v%s."))

    _, err := os.exec("git push origin v"+version)
    if err != nil {
        print("Error pushing tag: " + err)
        os.exit(1)
    }
    print("Tag pushed.")
}

// 编译部分
if not compile {
    os.exit()
}

archs = {'arm64', 'amd64'}
platforms = {'darwin', 'linux', 'windows'}

for _, arch in archs {
    for _, platform in platforms {
        suffix := platform == 'windows' ? '.exe' : ''
        prefix := fmt('GOOS=%s GOARCH=%s', platform, arch)
        output := fmt('releases/lk-%s-%s-v%s%s', platform, arch, version, suffix)
        cmd = fmt('%s go build -o %s', prefix, output)
        _, err := os.exec(cmd)
        if err != nil {
            print(fmt('Failed to build %s-%s: ', platform, arch, err))
            os.exit()
        }
        print(fmt('Successfully built %s-%s', platform, arch))
    }
}

print("All done.")